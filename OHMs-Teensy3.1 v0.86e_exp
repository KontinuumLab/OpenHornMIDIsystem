
//#####################################################
//#####################################################
// Open Horn Midi system / "OHMs"
// Teensy 3.1 - Main Code v0.82
// Copyright 2016, Jeppe Tofth√∏j Rasmussen

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <SPI.h>
#include <i2c_t3.h>
#include <Adafruit_GFX.h>
//#include <SoftwareSerial.h>
#include <ADC.h>
#include <Adafruit_SSD1306.h>
//
//SoftwareSerial uViewSerial(-1, 10);
ADC *adc = new ADC(); // adc object;


//############ OLED DEFINES: ####################

#define OLED_RESET 33
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif



//###########################################################################################
// ########################## MPU9250 variables and definitions: ############################

#define AK8963_ADDRESS   0x0C
#define WHO_AM_I_AK8963  0x00 // should return 0x48
#define INFO             0x01
#define AK8963_ST1       0x02  // data ready status bit 0
#define AK8963_XOUT_L	 0x03  // data
#define AK8963_XOUT_H	 0x04
#define AK8963_YOUT_L	 0x05
#define AK8963_YOUT_H	 0x06
#define AK8963_ZOUT_L	 0x07
#define AK8963_ZOUT_H	 0x08
#define AK8963_ST2       0x09  // Data overflow bit 3 and data read error status bit 2
#define AK8963_CNTL      0x0A  // Power down (0000), single-measurement (0001), self-test (1000) and Fuse ROM (1111) modes on bits 3:0
#define AK8963_ASTC      0x0C  // Self test control
#define AK8963_I2CDIS    0x0F  // I2C disable
#define AK8963_ASAX      0x10  // Fuse ROM x-axis sensitivity adjustment value
#define AK8963_ASAY      0x11  // Fuse ROM y-axis sensitivity adjustment value
#define AK8963_ASAZ      0x12  // Fuse ROM z-axis sensitivity adjustment value

#define SELF_TEST_X_GYRO 0x00                  
#define SELF_TEST_Y_GYRO 0x01                                                                          
#define SELF_TEST_Z_GYRO 0x02

/*#define X_FINE_GAIN      0x03 // [7:0] fine gain
#define Y_FINE_GAIN      0x04
#define Z_FINE_GAIN      0x05
#define XA_OFFSET_H      0x06 // User-defined trim values for accelerometer
#define XA_OFFSET_L_TC   0x07
#define YA_OFFSET_H      0x08
#define YA_OFFSET_L_TC   0x09
#define ZA_OFFSET_H      0x0A
#define ZA_OFFSET_L_TC   0x0B */

#define SELF_TEST_X_ACCEL 0x0D
#define SELF_TEST_Y_ACCEL 0x0E    
#define SELF_TEST_Z_ACCEL 0x0F

#define SELF_TEST_A      0x10

#define XG_OFFSET_H      0x13  // User-defined trim values for gyroscope
#define XG_OFFSET_L      0x14
#define YG_OFFSET_H      0x15
#define YG_OFFSET_L      0x16
#define ZG_OFFSET_H      0x17
#define ZG_OFFSET_L      0x18
#define SMPLRT_DIV       0x19
#define CONFIG           0x1A
#define GYRO_CONFIG      0x1B
#define ACCEL_CONFIG     0x1C
#define ACCEL_CONFIG2    0x1D
#define LP_ACCEL_ODR     0x1E   
#define WOM_THR          0x1F   

#define MOT_DUR          0x20  // Duration counter threshold for motion interrupt generation, 1 kHz rate, LSB = 1 ms
#define ZMOT_THR         0x21  // Zero-motion detection threshold bits [7:0]
#define ZRMOT_DUR        0x22  // Duration counter threshold for zero motion interrupt generation, 16 Hz rate, LSB = 64 ms

#define FIFO_EN          0x23
#define I2C_MST_CTRL     0x24   
#define I2C_SLV0_ADDR    0x25
#define I2C_SLV0_REG     0x26
#define I2C_SLV0_CTRL    0x27
#define I2C_SLV1_ADDR    0x28
#define I2C_SLV1_REG     0x29
#define I2C_SLV1_CTRL    0x2A
#define I2C_SLV2_ADDR    0x2B
#define I2C_SLV2_REG     0x2C
#define I2C_SLV2_CTRL    0x2D
#define I2C_SLV3_ADDR    0x2E
#define I2C_SLV3_REG     0x2F
#define I2C_SLV3_CTRL    0x30
#define I2C_SLV4_ADDR    0x31
#define I2C_SLV4_REG     0x32
#define I2C_SLV4_DO      0x33
#define I2C_SLV4_CTRL    0x34
#define I2C_SLV4_DI      0x35
#define I2C_MST_STATUS   0x36
#define INT_PIN_CFG      0x37
#define INT_ENABLE       0x38
#define DMP_INT_STATUS   0x39  // Check DMP interrupt
#define INT_STATUS       0x3A
#define ACCEL_XOUT_H     0x3B
#define ACCEL_XOUT_L     0x3C
#define ACCEL_YOUT_H     0x3D
#define ACCEL_YOUT_L     0x3E
#define ACCEL_ZOUT_H     0x3F
#define ACCEL_ZOUT_L     0x40
#define TEMP_OUT_H       0x41
#define TEMP_OUT_L       0x42
#define GYRO_XOUT_H      0x43
#define GYRO_XOUT_L      0x44
#define GYRO_YOUT_H      0x45
#define GYRO_YOUT_L      0x46
#define GYRO_ZOUT_H      0x47
#define GYRO_ZOUT_L      0x48
#define EXT_SENS_DATA_00 0x49
#define EXT_SENS_DATA_01 0x4A
#define EXT_SENS_DATA_02 0x4B
#define EXT_SENS_DATA_03 0x4C
#define EXT_SENS_DATA_04 0x4D
#define EXT_SENS_DATA_05 0x4E
#define EXT_SENS_DATA_06 0x4F
#define EXT_SENS_DATA_07 0x50
#define EXT_SENS_DATA_08 0x51
#define EXT_SENS_DATA_09 0x52
#define EXT_SENS_DATA_10 0x53
#define EXT_SENS_DATA_11 0x54
#define EXT_SENS_DATA_12 0x55
#define EXT_SENS_DATA_13 0x56
#define EXT_SENS_DATA_14 0x57
#define EXT_SENS_DATA_15 0x58
#define EXT_SENS_DATA_16 0x59
#define EXT_SENS_DATA_17 0x5A
#define EXT_SENS_DATA_18 0x5B
#define EXT_SENS_DATA_19 0x5C
#define EXT_SENS_DATA_20 0x5D
#define EXT_SENS_DATA_21 0x5E
#define EXT_SENS_DATA_22 0x5F
#define EXT_SENS_DATA_23 0x60
#define MOT_DETECT_STATUS 0x61
#define I2C_SLV0_DO      0x63
#define I2C_SLV1_DO      0x64
#define I2C_SLV2_DO      0x65
#define I2C_SLV3_DO      0x66
#define I2C_MST_DELAY_CTRL 0x67
#define SIGNAL_PATH_RESET  0x68
#define MOT_DETECT_CTRL  0x69
#define USER_CTRL        0x6A  // Bit 7 enable DMP, bit 3 reset DMP
#define PWR_MGMT_1       0x6B // Device defaults to the SLEEP mode
#define PWR_MGMT_2       0x6C
#define DMP_BANK         0x6D  // Activates a specific bank in the DMP
#define DMP_RW_PNT       0x6E  // Set read/write pointer to a specific start address in specified DMP bank
#define DMP_REG          0x6F  // Register in DMP from which to read or to which to write
#define DMP_REG_1        0x70
#define DMP_REG_2        0x71 
#define FIFO_COUNTH      0x72
#define FIFO_COUNTL      0x73
#define FIFO_R_W         0x74
#define WHO_AM_I_MPU9250 0x75 // Should return 0x71
#define XA_OFFSET_H      0x77
#define XA_OFFSET_L      0x78
#define YA_OFFSET_H      0x7A
#define YA_OFFSET_L      0x7B
#define ZA_OFFSET_H      0x7D
#define ZA_OFFSET_L      0x7E

// Using the MSENSR-9250 breakout board, ADO is set to 0 
// Seven-bit device address is 110100 for ADO = 0 and 110101 for ADO = 1
//#define ADO 0
#if ADO
#define MPU9250_ADDRESS 0x68  // Device address when ADO = 1
#else
#define MPU9250_ADDRESS 0x69  // Device address when ADO = 0
#define AK8963_ADDRESS 0x0C   //  Address of magnetometer
#endif  

#define AHRS true         // set to false for basic data read
#define SerialDebug true   // set to true to get Serial output for debugging

// Set initial input parameters
enum Ascale {
  AFS_2G = 0,
  AFS_4G,
  AFS_8G,
  AFS_16G
};

enum Gscale {
  GFS_250DPS = 0,
  GFS_500DPS,
  GFS_1000DPS,
  GFS_2000DPS
};

enum Mscale {
  MFS_14BITS = 0, // 0.6 mG per LSB
  MFS_16BITS      // 0.15 mG per LSB
};

// Specify sensor full scale
uint8_t Gscale = GFS_250DPS;
uint8_t Ascale = AFS_2G;
uint8_t Mscale = MFS_16BITS; // Choose either 14-bit or 16-bit magnetometer resolution
uint8_t Mmode = 0x02;        // 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
float aRes, gRes, mRes;      // scale resolutions per LSB for the sensors
  
// Pin definitions
//int intPin = 12;  // These can be changed, 2 and 3 are the Arduinos ext int pins
//int adoPin = 8;
//int myLed = 13;

int16_t accelCount[3];  // Stores the 16-bit signed accelerometer sensor output
int16_t gyroCount[3];   // Stores the 16-bit signed gyro sensor output
int16_t magCount[3];    // Stores the 16-bit signed magnetometer sensor output
float magCalibration[3] = {1.16, 1.17, 1.12}, magbias[3] = {-196.73, -100.45, -356.62}, magscale[3] = {1.13, 1.17, 0.79};  // Factory mag calibration and mag bias
float gyroBias[3] = {0.85, 1.05, 0.31}, accelBias[3] = {-0.97, 0.06, -0.84};      // Bias corrections for gyro and accelerometer
int16_t tempCount;      // temperature raw count output
float   temperature;    // Stores the real internal chip temperature in degrees Celsius
float   SelfTest[6];    // holds results of gyro and accelerometer self test

// global constants for 9 DoF fusion and AHRS (Attitude and Heading Reference System)
float GyroMeasError = PI * (10.0f / 180.0f);   // gyroscope measurement error in rads/s (start at 40 deg/s)
float GyroMeasDrift = PI * (0.5f  / 180.0f);   // gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
// There is a tradeoff in the beta parameter between accuracy and response speed.
// In the original Madgwick study, beta of 0.041 (corresponding to GyroMeasError of 2.7 degrees/s) was found to give optimal accuracy.
// However, with this value, the LSM9SD0 response time is about 10 seconds to a stable initial quaternion.
// Subsequent changes also require a longish lag time to a stable output, not fast enough for a quadcopter or robot car!
// By increasing beta (GyroMeasError) by about a factor of fifteen, the response time constant is reduced to ~2 sec
// I haven't noticed any reduction in solution accuracy. This is essentially the I coefficient in a PID control sense; 
// the bigger the feedback coefficient, the faster the solution converges, usually at the expense of accuracy. 
// In any case, this is the free parameter in the Madgwick filtering and fusion scheme.
float beta = sqrt(3.0f / 5.0f) * GyroMeasError;   // compute beta
float zeta = sqrt(3.0f / 5.0f) * GyroMeasDrift;   // compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
//#define Kp 2.0f * 5.0f // these are the free parameters in the Mahony filter and fusion scheme, Kp for proportional feedback, Ki for integral
#define Kp 2.0f * 6.0f
#define Ki 0.1f

uint32_t delt_t = 0; // used to control display output rate
uint32_t count = 0, sumCount = 0; // used to control display output rate
float pitch, yaw, roll, lastYaw, lastPitch, lastRoll, secondLastYaw, secondLastPitch, secondLastRoll;
float deltat = 0.0f, sum = 0.0f;        // integration interval for both filter schemes
uint32_t lastUpdate = 0, firstUpdate = 0; // used to calculate integration interval
uint32_t Now = 0;        // used to calculate integration interval

float ax, ay, az, gx, gy, gz, mx, my, mz; // variables to hold latest sensor data values 
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};    // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};       // vector to hold integral error for Mahony method


byte debugIMU = 0;

byte yawMIDI, pitchMIDI, rollMIDI, lastYawMIDI, lastPitchMIDI, lastRollMIDI;
int pitchMin = 80;
int pitchMax = 0;
int rollMin = 45;
int rollMax = -45;

//
//
////########### MPU9250 variables: ##############
//boolean newGX = 0;
//boolean newGY = 0;
//boolean newGZ = 0;
//
//int16_t gx = 0;
//int16_t gy = 0;
//int16_t gz = 0;
//
//int16_t gxTemp = 0;
//int16_t gyTemp = 0;
//int16_t gzTemp = 0;
//
//int16_t gxMin = 0;
//int16_t gxMax = 8250;
//
//int16_t gyMin = -8250;
//int16_t gyMid = 0;
//int16_t gyMax = 8250;
//int16_t gyMidLowBuf = -200;
//int16_t gyMidHighBuf= 200;
//int16_t gyBuffer = 1500;
//
//int16_t gzMin = 0;
//int16_t gzMax = 8250;
//
//
//#define G_ARRAY_LENGTH 20
//int gyroArrayCounter = 0;
//int16_t gxArray[G_ARRAY_LENGTH];
//int16_t gyArray[G_ARRAY_LENGTH];
//int16_t gzArray[G_ARRAY_LENGTH];
//byte GX = 0;
//byte GXLast = 0;
//byte GX2ndLast = 0;
//
//byte GY = 0;
//byte GYLast = 0;
//byte GY2ndLast = 0;
//
//byte GZ = 0;
//byte GZLast = 0;
//byte GZ2ndLast = 0;
//
//#define    MPU9250_ADDRESS            0x69
////#define    MAG_ADDRESS                0x0C
//
//#define    GYRO_FULL_SCALE_250_DPS    0x00  
//#define    GYRO_FULL_SCALE_500_DPS    0x08
//#define    GYRO_FULL_SCALE_1000_DPS   0x10
//#define    GYRO_FULL_SCALE_2000_DPS   0x18
//
//#define    ACC_FULL_SCALE_2_G        0x00  
//#define    ACC_FULL_SCALE_4_G        0x08
//#define    ACC_FULL_SCALE_8_G        0x10
//#define    ACC_FULL_SCALE_16_G       0x18
//
//


// Calibration button Variables:
int btnPin1 = 17;
int btnPin2 = 20;
int btnPin3 = 16;
int btn1Read = 1;
int btn2Read = 1;
int btn3Read = 1;
int btn1ReadLast = 1;
int btn2ReadLast = 1;
int btn3ReadLast = 1;

// ENCODER VARIABLES:
int encPin1 = 13;
int encPin2 = 14;
int encButtonPin = 15;


int encDir; 
boolean currentEncButton = 0;
boolean encBtnPressed;
boolean encBtnReleased;
boolean newValueBool = 0;

int encCounter; 
int lastEncCounter;

int encVal1 = 0;
int encVal2 = 0;
int encLastVal1 = 0;
int encLastVal2 = 0;
int encButtonVal = 0;
int encButtonLastVal = 0;


// KEY VARIABLES:
                  //0, 1,  2,  3,  4,  5, 6,  7, 8, 9, 10, 11,12,13, 14, 15, 16,17, 18, 19
//byte keyPins[] = {2, 24, 23, 22, 21, 9, 12, 7, 4, 6, 11, 5, 8, 26, 29, 27, 3, 30, 28, 25};
                 //{2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};
byte keyPins[] =   {2, 30, 29, 27, 28, 9, 11, 4, 6, 7, 8, 5, 12, 23, 25, 21, 3, 26, 22, 24};
  
  
#define NUMKEYS sizeof(keyPins)

//Main array which stores the current state of each key pin:
byte keysPressed[NUMKEYS];
// Another array which stores the previous state for comparison:
byte lastPressed[NUMKEYS];

unsigned long checkTimer = 0;
unsigned long lastCheckTime = 0;

boolean newNote;
boolean correct;

byte baseNote;       
byte currentNote;    
byte lastNote;       
int octave = 0;      
int lastOctave = 0;

byte splitLowPressed; //"bitwrite" variable
byte splitHighPressed; //"bitwrite" variable


byte currentSplitHighNote;
byte duplicateSplitHighNote;
byte currentSplitLowNote;
byte lastSplitHighNote;
byte lastSplitLowNote;
byte currentSplitNote;
byte lastSplitNote;

boolean splitActive = 0;
boolean lastSplitActive = 0;


byte currentSustainNote;
byte lastSustainNote;
boolean sustainActive = 0;
boolean lastSustainActive = 0;

byte sustainInterval;

byte currentIntervalNote;
boolean intervalActive = 0;
boolean lastIntervalActive = 0;

// BREATH VARIABLES:
byte breathPin = A10; // Pin with the breath sensor on it
int breathRead;
int lastBreathRead;
int secondLastBreathRead;

int breathMidLow = 240;
int breathMidHigh = 241;
int breathTemp;
int breathCalc;
byte breathPressure;
byte breathSaved;
byte velocity; 
byte lastVelocity;

int breathBuffer = 30;
int breathMin = 0;
int breathMax = 1023;

unsigned long breathTimer;
unsigned long breathTimerStart;
int breathMessageDelay = 10;

int breathArraySize = 25;
int breathArray[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };



// BEND VARIABLES:
int potm;
int bendPin = A12;
byte bendTemp = 0;
byte bend = 0;
byte bendSaved = 0;
int bendMin = 0;
int bendMax = 4095;
int bendBuffer = 50; // user settable
int bendLowBuf = 0;
int bendHighBuf = 0;
int bendMid = 0;

int bendArraySize = 25;
int bendArray[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


//#####################################################################
//########################   MIDI VARIABLES:  #########################
//MIDI MIDIcommands:
byte noteONCh1 = 144;
byte noteONCh2 = 145;
byte noteOFFCh2 = 129;

byte pitchBend = 224;
byte continuousController = 176;
byte sostenuto = 66;
byte footController = 4;
byte bankSelect = 0;
byte modulationControl = 1;

boolean sendCh1NoteMessage = 0;
boolean sendCh2NoteMessage = 0;
boolean sendBendMessage = 0;   
boolean sendBreathMessage = 0;




unsigned long displayTimer = 0;
unsigned long lastDisplay = 0;





// This function read Nbytes bytes from I2C device at address Address. 
// Put read bytes starting at register Register in the Data array. 
void I2Cread(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data)
{
  // Set register address
  Wire.beginTransmission(Address);
  Wire.write(Register);
  Wire.endTransmission();
  
  // Read Nbytes
  Wire.requestFrom(Address, Nbytes); 
  uint8_t index=0;
  while (Wire.available())
    Data[index++]=Wire.read();
}


// Write a byte (Data) in device (Address) at register (Register)
void I2CwriteByte(uint8_t Address, uint8_t Register, uint8_t Data)
{
  // Set register address
  Wire.beginTransmission(Address);
  Wire.write(Register);
  Wire.write(Data);
  Wire.endTransmission();
}



void setup() { 
  Serial.begin(9600);
  int n;
  for(n = 0; n < NUMKEYS; n++){
    pinMode(keyPins[n], INPUT);
  }
  pinMode(encPin1, INPUT_PULLUP);
  pinMode(encPin2, INPUT_PULLUP);
  pinMode(encButtonPin, INPUT_PULLUP);
  
  pinMode(btnPin1, INPUT_PULLUP);
  pinMode(btnPin2, INPUT_PULLUP);
  pinMode(btnPin3, INPUT_PULLUP);


  Wire.begin(I2C_MASTER, 0x00, I2C_PINS_18_19, I2C_PULLUP_EXT, I2C_RATE_400);


  byte c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
  Serial.print("MPU9250 "); Serial.print("I AM "); Serial.print(c, HEX); Serial.print(" I should be "); Serial.println(0x71, HEX);

  if (c == 0x71){ // WHO_AM_I should always be 0x68  
    Serial.println("MPU9250 is online...");
  
    MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
    Serial.print("x-axis self test: acceleration trim within : "); Serial.print(SelfTest[0],1); Serial.println("% of factory value");
    Serial.print("y-axis self test: acceleration trim within : "); Serial.print(SelfTest[1],1); Serial.println("% of factory value");
    Serial.print("z-axis self test: acceleration trim within : "); Serial.print(SelfTest[2],1); Serial.println("% of factory value");
    Serial.print("x-axis self test: gyration trim within : "); Serial.print(SelfTest[3],1); Serial.println("% of factory value");
    Serial.print("y-axis self test: gyration trim within : "); Serial.print(SelfTest[4],1); Serial.println("% of factory value");
    Serial.print("z-axis self test: gyration trim within : "); Serial.print(SelfTest[5],1); Serial.println("% of factory value");
//    delay(1000);
  
//    calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers 

    int k;
    Serial.println("G-bias:");
    for(k = 0; k < 3; k++){
      Serial.print(gyroBias[k]);
      Serial.print(" ");
    }
    Serial.println("");
    Serial.println("A-bias:");
    for(k = 0; k < 3; k++){
      Serial.print(accelBias[k]);
      Serial.print(" ");
    }

    Serial.println(""); 
//    initMPU9250(); 
    Serial.println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
  
    // Read the WHO_AM_I register of the magnetometer, this is a good test of communication
    byte d = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);  // Read WHO_AM_I register for AK8963
    Serial.print("AK8963 "); Serial.print("I AM "); Serial.print(d, HEX); Serial.print(" I should be "); Serial.println(0x48, HEX);
   

//    initAK8963(magCalibration); Serial.println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
//    magcalMPU9250(magbias, magscale); 
    if(SerialDebug) {
  //  Serial.println("Calibration values: ");
    Serial.print("X-Axis sensitivity adjustment value "); Serial.println(magCalibration[0], 2);
    Serial.print("Y-Axis sensitivity adjustment value "); Serial.println(magCalibration[1], 2);
    Serial.print("Z-Axis sensitivity adjustment value "); Serial.println(magCalibration[2], 2);
    }
  }  
  else
  {
    Serial.print("Could not connect to MPU9250: 0x");
    Serial.println(c, HEX);
    while(1) ; // Loop forever if communication doesn't happen
  }
  

//  uViewSerial.begin(9600);

// SET UP HIGH RESOLUTION ADC:
    ///// ADC0 ////
    // reference can be ADC_REF_3V3, ADC_REF_1V2 (not for Teensy LC) or ADC_REF_EXT.
    //adc->setReference(ADC_REF_3V3, ADC_0); // change all 3.3 to 1.2 if you change the reference to 1V2
    adc->setAveraging(16); // set number of averages
    adc->setResolution(12); // set bits of resolution
    // it can be ADC_VERY_LOW_SPEED, ADC_LOW_SPEED, ADC_MED_SPEED, ADC_HIGH_SPEED_16BITS, ADC_HIGH_SPEED or ADC_VERY_HIGH_SPEED
    // see the documentation for more information
    adc->setConversionSpeed(ADC_MED_SPEED); // change the conversion speed
    // it can be ADC_VERY_LOW_SPEED, ADC_LOW_SPEED, ADC_MED_SPEED, ADC_HIGH_SPEED or ADC_VERY_HIGH_SPEED
    adc->setSamplingSpeed(ADC_MED_SPEED); // change the sampling speed

    // always call the compare functions after changing the resolution!
//    adc->enableCompare(1.0/3.3*adc->getMaxValue(ADC_0), 0, ADC_0); // measurement will be ready if value < 1.0V
//    adc->enableCompareRange(1.0*adc->getMaxValue(ADC_0)/3.3, 2.0*adc->getMaxValue(ADC_0)/3.3, 0, 1, ADC_0); // ready if value lies out of [1.0,2.0] V

    ////// ADC1 /////
    #if defined(ADC_TEENSY_3_1)
    adc->setAveraging(16, ADC_1); // set number of averages
    adc->setResolution(12, ADC_1); // set bits of resolution
    adc->setConversionSpeed(ADC_MED_SPEED, ADC_1); // change the conversion speed
    adc->setSamplingSpeed(ADC_MED_SPEED, ADC_1); // change the sampling speed

    // always call the compare functions after changing the resolution!
//    adc->enableCompare(1.0/3.3*adc->getMaxValue(ADC_1), 0, ADC_1); // measurement will be ready if value < 1.0V
//    adc->enableCompareRange(1.0*adc->getMaxValue(ADC_1)/3.3, 2.0*adc->getMaxValue(ADC_1)/3.3, 0, 1, ADC_1); // ready if value lies out of [1.0,2.0] V
    #endif
  
////#######################################  
////  Setup MPU9250 Accelerometer, gyroscope and magnetometer:
//
//  // Set accelerometers low pass filter at 5Hz
//  I2CwriteByte(MPU9250_ADDRESS,29,0x06);
//  // Set gyroscope low pass filter at 5Hz
//  I2CwriteByte(MPU9250_ADDRESS,26,0x06);
// 
//  
//  // Configure gyroscope range
//  I2CwriteByte(MPU9250_ADDRESS,27,GYRO_FULL_SCALE_1000_DPS);
//  // Configure accelerometers range
//  I2CwriteByte(MPU9250_ADDRESS,28,ACC_FULL_SCALE_4_G);
////  // Set by pass mode for the magnetometers
//  I2CwriteByte(MPU9250_ADDRESS,0x37,0x02);
////  
////  // Request continuous magnetometer measurements in 16 bits
////  I2CwriteByte(MAG_ADDRESS,0x0A,0x16);
//
//  delay(2000);


  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  // init done
  //  Welcome screen:
  delay(500);
  display.clearDisplay();
  display.setTextSize(5);
  display.setTextColor(WHITE);
  display.setCursor(8,5);
  display.println("OHMs");
  display.display();
  delay(1000);
  
  display.setTextSize(1);
  display.setCursor(2,50);
  display.print("Open Horn MIDI system");
//  display.setCursor(29,50);
//  display.println("MIDI system");
  display.display();
  delay(3000);
  display.clearDisplay(); 
  display.display(); 
  

  
  int i;
  for(i = 0; i < breathArraySize; i++){
    breathTemp = adc->analogRead(breathPin);
    breathArray[i] = breathTemp;
  }
  isort(breathArray,breathArraySize);
  breathRead = breathArray[breathArraySize / 2];
  breathMin = breathRead + breathBuffer;
  
  bendMid = adc->analogRead(bendPin);
  bendLowBuf = bendMid - bendBuffer;
  bendHighBuf = bendMid + bendBuffer;
  
  
}



//##############################################################
//##############################################################
//######################## MAIN LOOP: ##########################


void loop(){
// BUTTON CHECK:
//(Will be menu call)
//  quickEncRead();
//  if(encButtonVal == 0){
  
//  encRead();
//  if(encBtnPressed == 1){
////    Serial.println("Button pressed");
//    uViewSerial.print('#');
//  }
//  if(encBtnReleased == 1){
////    Serial.println("Button Released");
//    uViewSerial.print('$');
//  }
//  }
//

//##############################
// #########  Calibration call:
  quickReadCalBtns();
  if(btn1Read == 0 || btn2Read == 0 || btn3Read == 0){
    readCalButtons();
    if(btn1Read == 0){
      breathMax = 0;
      breathMin = 4095;
//      Serial.println("Calibrating Breath...");
      while(btn1Read == 0){
        calibrateBreathHighRez();
        readCalButtons();
      }
    }
    
    if(btn2Read == 0){
      potm = adc->analogRead(bendPin);
      bendMid = potm;
      bendMax = 0;
      bendMin = 4095;
//      Serial.println("Calibrating Bend...");
      while(btn2Read == 0){
        calibrateBend();
        readCalButtons();
      }
      int bendMidTemp = bendMid;
      potm = adc->analogRead(bendPin);
      bendMid = (potm + bendMidTemp) / 2;
      Serial.print("bendMid");
      Serial.println(bendMid);
      bendLowBuf = bendMid - bendBuffer;
      bendHighBuf = bendMid + bendBuffer;
      Serial.print("bendLowBuf = ");
      Serial.println(bendLowBuf);
      Serial.print("bendHighBuf = ");
      Serial.println(bendHighBuf);
      Serial.print("bendMin = ");
      Serial.println(bendMin);
      Serial.print("bendMax = ");
      Serial.println(bendMax);
    }
    
    if(btn3Read == 0){
      if(debugIMU == 0){
      //######################################################
      //########## IMU CALIBRATION ROUTINE: ##################
        debugIMU = 1;
        pitchMin = 0;
        pitchMax = 85;
        rollMin = 90;
        rollMax = -90;
        while(btn3Read == 0){
          updateIMU();
          if(pitch < pitchMin){
            pitchMin = pitch;
          }
          if(pitch > pitchMax){
            pitchMax = pitch;
          }
          if(roll < rollMin){
            rollMin = roll;
          }
          if(roll > rollMax){
            rollMax = roll;
          }
          readCalButtons();
        }
        debugIMU = 2;
        delay(2000);
      }
      else if(debugIMU == 2){
        debugIMU = 0;
        delay(2000);
        display.clearDisplay();
        display.display();
      }
    }
  }

  updatePressureHighRez();
  
  if(velocity != lastVelocity){
    if(velocity == 0){
//      xBeeMIDI(noteONCh1, currentNote, 0);
//      xBeeMIDI(noteONCh1, lastNote, 0);
//      xBeeMIDI(noteONCh2, currentSplitNote, 0);
//      xBeeMIDI(noteONCh2, lastSplitNote, 0);
      if(splitActive == 1){
//        sendMessage(note, currentSplitLowNote, 0, 1); // generic "send" function
//        sendMessage(notercurrentSplitHighNote, 0, 2);
        usbMIDI.sendNoteOn(currentSplitLowNote, 0, 1);
        usbMIDI.sendNoteOn(currentSplitHighNote, 0, 2);        
      }
      else{
        if(sustainActive == 1){
          usbMIDI.sendNoteOn(currentSustainNote, 0, 1);
          usbMIDI.sendNoteOn(currentNote, 0, 2);
          }
        else{
          usbMIDI.sendNoteOn(currentNote, 0, 1);
        }
      }
    }
    else if(lastVelocity == 0){
      breathTimerStart = millis();
      if(correct == 1){
//          xBeeMIDI(noteONCh1, currentNote, velocity);
        if(splitActive == 0){
          if(sustainActive == 1){
            usbMIDI.sendNoteOn(currentSustainNote, velocity, 1);
            usbMIDI.sendNoteOn(currentNote, velocity, 2);
          }
          else{
            usbMIDI.sendNoteOn(currentNote, velocity, 1);
          }
        }
        else{
//            xBeeMIDI(noteONCh2, currentSplitNote, velocity);
          usbMIDI.sendNoteOn(currentSplitLowNote, velocity, 1);
          usbMIDI.sendNoteOn(currentSplitHighNote, velocity, 2);
        }
      }
    }
    else{
//        xBeeMIDI(continuousController, 2, velocity);
      breathTimer = millis();
      if(breathTimer - breathTimerStart > breathMessageDelay){
        usbMIDI.sendControlChange(2, velocity, 1);
        usbMIDI.sendControlChange(2, velocity, 2);
        breathTimerStart = millis();
      }
    }
  }
  
  
  readBend();
  if(bend != bendSaved){
//    xBeeMIDI(pitchBend, 0, bend);
    usbMIDI.sendPitchBend(bend, 1);
    usbMIDI.sendPitchBend(bend, 2);
    
//    Serial.print("potmeter = ");
//    Serial.println(potm);
//    Serial.print("bend = ");
//    Serial.println(bend);
  }

//  updateIMU();
//  if(newGX == 1){
//    usbMIDI.sendControlChange(12, GX, 1); // CC#12 = Effect Controller 1
//    newGX = 0;
//  }
//  if(newGY == 1){
//    usbMIDI.sendControlChange(1, GY, 1); // CC#1 = Modulation / Vibrato
//    newGY = 0;
//  }
//  if(newGZ == 1){
//    usbMIDI.sendControlChange(4, GZ, 1); // CC#4 = Foot controller / Aftertouch
//    newGZ = 0;
//  }

  updateIMU();
  if(pitchMIDI != lastPitchMIDI){
    usbMIDI.sendControlChange(1, pitchMIDI, 1);
   // usbMIDI.sendControlChange(1, pitchMIDI, 2);
  }
  rollMIDI = (rollMIDI * pitchMIDI) / 127;
  if(rollMIDI != lastRollMIDI){
   usbMIDI.sendControlChange(4, rollMIDI, 1);
   // usbMIDI.sendControlChange(1, pitchMIDI, 2);
  }

  
  readKeys();  // Accesses readKeys(), readKeyPins(), keyLogic() and pickSplit(), as needed
  if(velocity != 0){
    if(splitActive == 0){
      if(lastSplitActive == 1){
//          xBeeMIDI(noteONCh2, lastSplitNote, 0);
//          xBeeMIDI(noteONCh2, currentSplitNote, 0);
//          xBeeMIDI(noteONCh1, lastNote, 0);
//          xBeeMIDI(noteONCh1, currentNote, 0);
        usbMIDI.sendNoteOn(currentSplitLowNote, 0, 1);
        usbMIDI.sendNoteOn(currentSplitHighNote, 0, 2);
      }
      
      if(sustainActive == 1 && intervalActive == 0){
        if(lastSustainActive == 0){
          currentSustainNote = currentNote;
          usbMIDI.sendNoteOn(currentNote, velocity, 2);
        }
      }
      else if(sustainActive == 1 && intervalActive == 1){
        if(lastIntervalActive == 0){
          sustainInterval = currentSustainNote - currentNote;
        }
        lastSustainNote = currentSustainNote;
        currentSustainNote = currentNote + sustainInterval;
      }
      else if(lastSustainActive == 1){
        usbMIDI.sendNoteOn(currentSustainNote, 0, 1);
        usbMIDI.sendNoteOn(currentNote, 0, 2);
        usbMIDI.sendNoteOn(currentNote, velocity, 1);
      }
      
      if(newNote == 1){
        if(sustainActive == 1){
          usbMIDI.sendNoteOn(lastNote, 0, 2);
          usbMIDI.sendNoteOn(currentNote, velocity, 2);
          if(intervalActive == 1){
            usbMIDI.sendNoteOn(lastSustainNote, 0, 1);
            usbMIDI.sendNoteOn(currentSustainNote, velocity, 1);
          }         
        }
        else{
//          xBeeMIDI(noteONCh1, lastNote, 0);
//          xBeeMIDI(noteONCh1, currentNote, velocity);
          usbMIDI.sendNoteOn(lastNote, 0, 1);
          usbMIDI.sendNoteOn(currentNote, velocity, 1);
        }
      }
    }
    
    else if(splitActive == 1){
      if(lastSplitActive == 0){
        if(sustainActive == 1){
          usbMIDI.sendNoteOn(currentNote, 0, 2);
          usbMIDI.sendNoteOn(currentSustainNote, 0, 1);
        }
        else{
          usbMIDI.sendNoteOn(currentNote, 0, 1);
        }
        usbMIDI.sendNoteOn(currentSplitLowNote, velocity, 1);
        usbMIDI.sendNoteOn(currentSplitHighNote, velocity, 2);
      }
      else{
        if(currentSplitLowNote != lastSplitLowNote){
  //          xBeeMIDI(noteONCh1,lastNote, 0);
  //          xBeeMIDI(noteONCh1, currentNote, velocity);
          usbMIDI.sendNoteOn(lastSplitLowNote, 0, 1);
          usbMIDI.sendNoteOn(currentSplitLowNote, velocity, 1);
        }
        if(currentSplitHighNote != lastSplitHighNote){
  //          xBeeMIDI(noteONCh2,lastSplitNote, 0);
  //          xBeeMIDI(noteONCh2,currentSplitNote, velocity);
          usbMIDI.sendNoteOn(lastSplitHighNote, 0, 2);
          usbMIDI.sendNoteOn(currentSplitHighNote, velocity, 2);
        }
      }
    }
  }
  else{
    if(sustainActive == 1 && intervalActive == 0){
      if(lastSustainActive == 0){
        currentSustainNote = currentNote;
//        usbMIDI.sendNoteOn(currentNote, velocity, 2);
      }
    }
    else if(sustainActive == 1 && intervalActive == 1){
      if(lastIntervalActive == 0){
        sustainInterval = currentSustainNote - currentNote;
      }
      lastSustainNote = currentSustainNote;
      currentSustainNote = currentNote + sustainInterval;
    }
  }
//  Serial.print("check");
//  Serial.println(millis());  

  while (usbMIDI.read());
//  delay(10);
}

//##################### :END MAIN LOOP #########################
//##############################################################
//##############################################################









//void quickEncRead(){
//  encButtonVal = digitalRead(encButtonPin);
//}
//  

void encRead(){
  //READ pins:
  encLastVal1 = encVal1;
  encLastVal2 = encVal2;
  encButtonLastVal = encButtonVal;
  
  encVal1 = debounce(encPin1, encLastVal1, 1);
  encVal2 = debounce(encPin2, encLastVal2, 1);
  encButtonVal = debounce(encButtonPin, encButtonLastVal, 1);
  

  // ENCODER:

  encDir = 0;
  if(encVal1 == 1 && encLastVal1 == 0){
    if(encVal2 == 0){
      encDir = -1;
    }
    else{
      encDir = 1;
    }
  }
  if(encButtonVal == 0 && encButtonLastVal == 1){
    encBtnPressed = 1;
    encBtnReleased = 0;
  }
  else if(encButtonVal == 1 && encButtonLastVal == 0){
    encBtnPressed = 0;
    encBtnReleased = 1;
  }
  else{
    encBtnPressed = 0;
    encBtnReleased = 0;
  }
  
  encCounter += encDir;
}

void quickReadCalBtns(){
  btn1Read = digitalRead(btnPin1);
  btn2Read = digitalRead(btnPin2);
  btn3Read = digitalRead(btnPin3);  
}

void readCalButtons(){
  btn1ReadLast = btn1Read;
  btn2ReadLast = btn2Read;
  btn3ReadLast = btn3Read;  
  btn1Read = debounce(btnPin1, btn1ReadLast, 2);
  btn2Read = debounce(btnPin2, btn1ReadLast, 2);
  btn3Read = debounce(btnPin3, btn1ReadLast, 2);
}



void updatePressureHighRez(){
  secondLastBreathRead = lastBreathRead;
  lastBreathRead = breathRead;
  
  lastVelocity = velocity;
    
  int i;
  for(i = 0; i < breathArraySize; i++){
    breathTemp = adc->analogRead(breathPin);
    breathArray[i] = breathTemp;
  }
  isort(breathArray,breathArraySize);
  breathRead = breathArray[breathArraySize / 2];
//  breathPressure = map(breathRead, breathMin, breathMax, 1, 127);
  
  
//  breathRead = map(breathRead, 1023, 0, 0, 1023); // Reverse the input

  if(breathRead < breathMin){
    breathPressure = 0;
  }
  else{
    if(breathRead <= breathMax){
      breathPressure = map(breathRead, breathMin, breathMax, 1, 127);
    }
    else if(breathRead > breathMax){
      breathPressure = 127;
    }
  }
  if(breathPressure != breathSaved){
    velocity = breathPressure;
    breathSaved = breathPressure;
  }  
  
}


void updatePressure(){
  lastVelocity = velocity;
    
  int i;
  for(i = 0; i < breathArraySize; i++){
    breathTemp = analogRead(breathPin);
    breathArray[i] = breathTemp;
  }
  isort(breathArray,breathArraySize);
  breathRead = breathArray[breathArraySize / 2];
//  breathPressure = map(breathRead, breathMin, breathMax, 1, 127);
  
  
//  breathRead = map(breathRead, 1023, 0, 0, 1023); // Reverse the input

  if(breathRead < breathMin){
    breathPressure = 0;
  }
  else{
    if(breathRead <= breathMax){
      breathPressure = map(breathRead, breathMin, breathMax, 1, 127);
    }
    else if(breathRead > breathMax){
      breathPressure = 127;
    }
  }
  if(breathPressure != breathSaved){
    velocity = breathPressure;
    breathSaved = breathPressure;
  }
}

void calibrateBreath(){
  int i;
  for(i = 0; i < breathArraySize; i++){
    breathTemp = analogRead(breathPin);
    breathArray[i] = breathTemp;
  }
  isort(breathArray,breathArraySize);
  breathRead = breathArray[breathArraySize / 2];
//  breathRead = map(breathRead, 1023, 0, 0, 1023);
  if(breathRead > breathMax){
    breathMax = breathRead;
  }
  if(breathRead < breathMin){
    breathMin = breathRead + breathBuffer;
  }
}


void calibrateBreathHighRez(){
  int i;
  for(i = 0; i < breathArraySize; i++){
    breathTemp = adc->analogRead(breathPin);
    breathArray[i] = breathTemp;
  }
  isort(breathArray,breathArraySize);
  breathRead = breathArray[breathArraySize / 2];
//  breathRead = map(breathRead, 1023, 0, 0, 1023);
  if(breathRead > breathMax){
    breathMax = breathRead;
  }
  if(breathRead < breathMin){
    breathMin = breathRead + breathBuffer;
  }
}


//void breathCalSetup(){
//  int i;
//  for(i = 0; i < breathArraySize; i++){
//    breathTemp = analogRead(breathPin);
//    breathArray[i] = breathTemp;
//  }
//  isort(breathArray,breathArraySize);
//  breathRead = breathArray[breathArraySize / 2];
//  breathMin = breathRead + breathBuffer;
//
//}

void readBend(){
  bendSaved = bend;
  potm = adc->analogRead(bendPin);
  
  if(potm <= bendLowBuf){
//    bendTemp = map(potm, bendMin, bendLowBuf, 0, 63);
    bend = map(potm, bendMin, bendLowBuf, 0, 63);
    if(potm < bendMin){
      bend = 0;
    }
  }
  else if(potm >= bendHighBuf){
//    bendTemp = map(potm, bendHighBuf, bendMax, 65, 127);
//    if(bendTemp != bendSaved){
    bend = map(potm, bendHighBuf, bendMax, 65, 127);
    if(potm > bendMax){
      bend = 127;
    }
//    }
  }
  // bend is the output value.
  else if(potm > bendLowBuf && potm < bendHighBuf){
    bend = 64;
  }
}

void calibrateBend(){
  potm = adc->analogRead(bendPin);
//  int i;
//  for(i = 0; i < bendArraySize; i++){
//    bendTemp = analogRead(bendPin);
//    bendArray[i] = bendTemp;
//  }
//  isort(bendArray,bendArraySize);
//  potm = bendArray[bendArraySize / 2];
//  
  if(potm > bendMax){
    bendMax = potm;
  }
  if(potm < bendMin){
    bendMin = potm;
  }
}







//
//
//
//
//
//void updateIMU(){
//  uint8_t Buf[14];
//  // Read accelerometer and gyroscope
//  I2Cread(MPU9250_ADDRESS,0x3B,14,Buf);
//  
//  updateGyro(Buf);
//  gyroArrayCounter++;
//}
//
//
//
//void updateGyro(uint8_t *buffer){ 
//  gxTemp=-(buffer[0]<<8 | buffer[1]);
//  gyTemp=-(buffer[2]<<8 | buffer[3]);
//  gzTemp=buffer[4]<<8 | buffer[5];
//  
//  gxArray[gyroArrayCounter] = gxTemp;
//  gyArray[gyroArrayCounter] = gyTemp;
//  gzArray[gyroArrayCounter] = gzTemp;
//  
//  
//  if(gyroArrayCounter >= G_ARRAY_LENGTH){
//
//    GX2ndLast = GXLast;
//    GXLast = GX;    
//    isort16(gxArray, G_ARRAY_LENGTH);
//    int gArrayMedian = G_ARRAY_LENGTH / 2;
//
//    gx = gxArray[gArrayMedian];
//    if(gx > gxMax){
//      GX = 0;
//    }
//    else if(gx < gxMin){
//      GX = 127;
//    }
//    else{
//      GX = map(gx, gxMax, gxMin, 0, 127);
//    }
//
//
//    GY2ndLast = GYLast;
//    GYLast = GY;    
//    isort16(gyArray, G_ARRAY_LENGTH);
//    gy = gyArray[gArrayMedian];
//    if(gy > gyMax){
//      GY = 127;
//    }
//    else if(gy < gyMin){
//      GY = 0;
//    }
//    else if(gy >= gyMidHighBuf){
//      GY = map(gy, gyMidHighBuf, gyMax, 65, 127);
//    }
//    else if(gy <= gyMidLowBuf){
//      GY = map(gy, gyMin, gyMidLowBuf, 0, 63);
//    }
//    else{   
//      GY = 64;
//    }
//    
//
//    GZ2ndLast = GZLast;
//    GZLast = GZ;        
//    isort16(gzArray, G_ARRAY_LENGTH);
//    gz = gzArray[gArrayMedian];
//    if(gz > gzMax){
//      GZ = 127;
//    }
//    else if(gz < gzMin){
//      GZ = 0;
//    }
//    else{   
//      GZ = map(gz, gzMin, gzMax, 0, 127);
//    }
//    checkNewGX();
//    checkNewGY();
//    checkNewGZ();
//    gyroArrayCounter = 0;
//  }
//}
//
//
//void calibrateIMU(){
//  uint8_t Buf[14];
//  // Read accelerometer and gyroscope
//  I2Cread(MPU9250_ADDRESS,0x3B,14,Buf);
//  
//  calibrateGyro(Buf);
//  gyroArrayCounter++;
//}
//
//void calibrateGyro(uint8_t *buffer){ 
//  gxTemp=-(buffer[0]<<8 | buffer[1]);
//  gyTemp=-(buffer[2]<<8 | buffer[3]);
//  gzTemp=buffer[4]<<8 | buffer[5];
//  
//  gxArray[gyroArrayCounter] = gxTemp;
//  gyArray[gyroArrayCounter] = gyTemp;
//  gzArray[gyroArrayCounter] = gzTemp;
//  
//  
//  if(gyroArrayCounter >= G_ARRAY_LENGTH){
//
////    GX2ndLast = GXLast;
////    GXLast = GX;    
//    isort16(gxArray, G_ARRAY_LENGTH);
//    int gArrayMedian = G_ARRAY_LENGTH / 2;
//
//    gx = gxArray[gArrayMedian];
//    if(gx > gxMax){
//      gxMax = gx;
//    }
//    else if(gx < gxMin){
//      gxMin = gx;
//    }
//
//
////    GY2ndLast = GYLast;
////    GYLast = GY;
//
//    isort16(gyArray, G_ARRAY_LENGTH);
//    gy = gyArray[gArrayMedian];
//    if(gy > gyMax){
//      gyMax = gy;
//    }
//    else if(gy < gyMin){
//      gyMin = gy;
//    }
//    
//
////    GZ2ndLast = GZLast;
////    GZLast = GZ;        
//    isort16(gzArray, G_ARRAY_LENGTH);
//    gz = gzArray[gArrayMedian];
//    if(gz > gzMax){
//      gzMax = gz;
//    }
//    else if(gz < gzMin){
//      gzMin = gz;
//    }
//    
//    gyroArrayCounter = 0;
//  }
//}
//
//
//void checkNewGX(){
//  if(GX > GXLast){
//    if(GX - GX2ndLast > 2){
//
//        newGX = 1;
//
//    }
//  }
//  else if(GX < GXLast){
//    if(GX2ndLast - GX > 2){
//
//        newGX = 1;
//
//    }
//  }
//}
//
//void checkNewGY(){
//  if(GY > GYLast){
//    if(GY - GY2ndLast > 2){
//
//        newGY = 1;
//
//    }
//  }
//  else if(GY < GYLast){
//    if(GY2ndLast - GY > 2){
//
//        newGY = 1;
//
//    }
//  }
//}
//
//void checkNewGZ(){
//  if(GZ > GZLast){
//    if(GZ - GZ2ndLast > 2){
//
//        newGZ = 1;
//
//    }
//  }
//  else if(GZ < GZLast){
//    if(GZ2ndLast - GZ > 2){
//
//        newGZ = 1;
//
//    }
//  }
//}

//#################################################################
//#################################################################
// READ THE TOUCH KEYS:

void readKeys(){
  correct = 0;
  newNote = 0;
    
  readKeyPins();
  byte i;  
  if(keysPressed[0] == 0){
    checkTimer = millis();
    lastCheckTime = checkTimer;
  }
  else if(keysPressed[0] == 1){
    checkTimer = millis();
  }

  if(checkTimer - lastCheckTime > 10){
    keyLogic();
//    for(i = 0; i < NUMKEYS; i++){
//      if(keysPressed[i] != lastPressed[i]){
//        newNote = 1;
//        break;
//      }
//    }
  }
}

void readKeyPins(){
  byte j;
  for (j = 0; j < NUMKEYS; j++){
    lastPressed[j] = keysPressed[j];
  }
  for (j = 0; j < NUMKEYS; j++){ // Call debounce for touch keys
    keysPressed[j] = digitalRead(keyPins[j]); // Original debounceTime = 8
  }
}


//#################################################################
//#################################################################
// KEY LOGIC:
void keyLogic(){

  lastNote = currentNote;
  setOctave();
    
  lastSustainActive = sustainActive;
  lastIntervalActive = intervalActive;  
  if(keysPressed[13] == 1){
    sustainActive = 1;
    if(keysPressed[5] == 0){
      intervalActive = 0;
    }
    else if(keysPressed[5] == 1){
      intervalActive = 1;
    }
  }
  else{
    sustainActive = 0;
    intervalActive = 0;
  }
 
 
  lastSplitActive = splitActive; 
  if(keysPressed[5] == 1 && keysPressed [13] == 0){
    splitActive = 1;
    pickSplit();
  }
  else{
    splitActive = 0;
    
// Test for highEFlat:
    if(correct == 0){
      
      if(keysPressed[6] == 1){
        
        if(keysPressed[7] == 0){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 0){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 1){
                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 63;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
                      
                    }
                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for highDNat:
    if(correct == 0){
      
      if(keysPressed[6] == 1){
        
        if(keysPressed[7] == 0){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 0){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 0){
                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 62;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
                      
                    }
                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for highcSharp:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 0){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 0){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
//                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 61;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
//                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for highcNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 0){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
//                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 60;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
//                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for highbNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
          if(keysPressed[8] == 0){
            if(keysPressed[9] == 0){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 0){
                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 59;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
                    }
                    
//                  }
//                }
              }
            }
          }
        }
        
      }
      
    }
// Test for highbFlat-"1":
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
          if(keysPressed[8] == 1){
            if(keysPressed[9] == 0){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 0){
                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 58;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
                    }
                    
//                  }
//                }
              }
            }
          }
        }
        
      }
      
    }
// Test for highbFlat-"2":
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 1){
                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 58;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
                      
                    }
                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for aNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 0){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
                    if(keysPressed[14] == 0){
                      
//                      if(keysPressed[15] == 0){
//                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 57;
                                correct = 1;
//                              }
//                            }
//                          }
//                        }
//                      }
                      
                    }
                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for aFlat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
                if(keysPressed[11] == 1){
//                  if(keysPressed[12] == 0){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 0){
                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 56;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
//                    }
                    
//                  }
                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for gNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 0){
                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 55;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
//                    }
                    
//                  }
                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for fSharp:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 0){
                        if(keysPressed[16] == 1){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 54;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for fNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 0){
//                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 53;
                                correct = 1;
//                              }
//                            }
//                          }
                        }
                      }
                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for eNat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 0){
//                            if(keysPressed[18] == 0){
//                              if(keysPressed[19] == 0){
                                baseNote = 52;
                                correct = 1;
//                              }
//                            }
                          }
                        }
                      }
                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for eFlat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
//                  if(keysPressed[12] == 0){
//                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
                            if(keysPressed[18] == 1){
                              if(keysPressed[19] == 0){
                                baseNote = 51;
                                correct = 1;
                              }
                            }
                          }
                        }
                      }
                      
//                    }
//                    
//                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for lowD:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
                  if(keysPressed[12] == 0){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
                            if(keysPressed[18] == 0){
                              if(keysPressed[19] == 0){
                                baseNote = 50;
                                correct = 1;
                              }
                            }
                          }
                        }
                      }
                      
//                    }
                    
                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for lowCSharp:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
                if(keysPressed[11] == 1){
                  if(keysPressed[12] == 0){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
//                            if(keysPressed[18] == 0){
                              if(keysPressed[19] == 1){
                                baseNote = 49;
                                correct = 1;
                              }
//                            }
                          }
                        }
                      }
                      
//                    }
                    
                  }
                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for lowC:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
                if(keysPressed[11] == 0){
                  if(keysPressed[12] == 0){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
                            if(keysPressed[18] == 0){
                              if(keysPressed[19] == 1){
                                baseNote = 48;
                                correct = 1;
                              }
                            }
                          }
                        }
                      }
                      
//                    }
                    
                  }
                }
              }
            }
//          }
        }
        
      }
      
    }
// Test for lowB:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
                  if(keysPressed[12] == 1){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
                            if(keysPressed[18] == 0){
                              if(keysPressed[19] == 0){
                                baseNote = 47;
                                correct = 1;
                              }
                            }
                          }
                        }
                      }
                      
//                    }
                    
                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }    
// Test for lowBFlat:
    if(correct == 0){
      
      if(keysPressed[6] == 0){
        
        if(keysPressed[7] == 1){
//          if(keysPressed[8] == 0){
            if(keysPressed[9] == 1){
              if(keysPressed[10] == 1){
//                if(keysPressed[11] == 0){
                  if(keysPressed[12] == 1){
                    
//                    if(keysPressed[14] == 0){
                      
                      if(keysPressed[15] == 1){
                        if(keysPressed[16] == 1){
                          if(keysPressed[17] == 1){
                            if(keysPressed[18] == 0){
                              if(keysPressed[19] == 1){
                                baseNote = 46;
                                correct = 1;
                              }
                            }
                          }
                        }
                      }
                      
//                    }
                    
                  }
//                }
              }
            }
//          }
        }
        
      }
      
    }
    if(correct == 1){
      currentNote = baseNote + octave;
      if(currentNote != lastNote){
        newNote = 1;
      }
    }
  } 
  

}

//#################################################################
//##################    PICK INTERVAL:    #########################

void pickSplit(){
  lastSplitHighNote = currentSplitHighNote;
  lastSplitLowNote = currentSplitLowNote;
  
  bitWrite(splitHighPressed, 0, keysPressed[11]);
  bitWrite(splitHighPressed, 1, keysPressed[10]);
  bitWrite(splitHighPressed, 2, keysPressed[9]);
  bitWrite(splitHighPressed, 3, keysPressed[7]);
  byte n = 0;
  byte i;
  for(i = 18; i > 14; i--){
    bitWrite(splitLowPressed, n, keysPressed[i]);
    n++;
  }
  
  if(splitHighPressed != 0){
    correct = 1;
    currentSplitHighNote = splitHighPressed + octave + 47;
    if(splitLowPressed != 0){
      currentSplitLowNote = splitLowPressed + octave + 47; //(+ splitOctaveDistance)
    }
    else{
      currentSplitLowNote = currentSplitHighNote;
    }
//  
//    if(correct == 1){
//      if(currentSplitHighNote != lastSplitHighNote || currentSplitLowNote != lastSplitLowNote){
//        newNote = 1;
//      }
//    }
  }
}


//#################################################################
//#################    Octave Update Function:    #################
void setOctave(){
  if     (keysPressed[1] == 0 && keysPressed[2] == 1 && keysPressed[3] == 1 && keysPressed[4] == 1){
    octave = 48;
  }
  else if(keysPressed[1] == 0 && keysPressed[2] == 0 && keysPressed[3] == 0 && keysPressed[4] == 1){
    octave = 36;
  }
  else if(keysPressed[1] == 0 && keysPressed[2] == 0 && keysPressed[3] == 1 && keysPressed[4] == 1){
    octave = 24;
  }
  else if(keysPressed[1] == 0 && keysPressed[2] == 0 && keysPressed[3] == 1 && keysPressed[4] == 0){
    octave = 12;
  }
  else if(keysPressed[1] == 0 && keysPressed[2] == 1 && keysPressed[3] == 1 && keysPressed[4] == 0){
    octave = 0;
  }
  else if(keysPressed[1] == 0 && keysPressed[2] == 1 && keysPressed[3] == 0 && keysPressed[4] == 0){
    octave = -12;
  }
  else if(keysPressed[1] == 1 && keysPressed[2] == 1 && keysPressed[3] == 0 && keysPressed[4] == 0){
    octave = -24;
  }
  else if(keysPressed[1] == 1 && keysPressed[2] == 0 && keysPressed[3] == 0 && keysPressed[4] == 0){
    octave = -36;
  }
  else if(keysPressed[1] == 1 && keysPressed[2] == 1 && keysPressed[3] == 1 && keysPressed[4] == 0){
    octave = -48;
  }
//  else if(keysPressed[1] == 0 && keysPressed[2] == 0 && keysPressed[3] == 0 && keysPressed[4] == 0){
//    octave = 48;
//  }
//  octave = octave + transposeValue; // Transpose operation from menu settings
}



//#################################################################
//#################################################################
// DEBOUNCE:
// Debounce function for buttons and keys
boolean debounce(byte pin, boolean last, byte debounceTime){
  boolean current = digitalRead(pin);
  if(last != current){
    delay(debounceTime);
    current = digitalRead(pin);
  }
  return current;
}

//###################################################################
//###################################################################
// SORT FUNCTION FOR THE MEDIAN FILTER:
void isort(int *a, int n){
  // *a is an array pointer, n is the array size
  for (int i = 1; i < n; ++i)
  {
    int j = a[i];
    int k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
}

void isort16(int16_t *a, int n){
  // *a is an array pointer, n is the array size
  for (int i = 1; i < n; ++i)
  {
    int j = a[i];
    int k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
}

//#################################################################
//#################################################################
// MIDI-Message function:
// xBeeMIDI parameters for noteONCh1 are: MIDIcommand, midiNote, midiVelocity
// for pitchBend are: MIDIcommand, lsbBend, msbBend
//void xBeeMIDI(byte MIDIcommand, byte data1, byte data2){
//  Serial1.write(MIDIcommand);//send MIDIcommand (noteONCh1 / pitchBend etc)
//  Serial1.write(data1);//send data1 (pitch, lsbBend etc)
//  Serial1.write(data2);//send data2 (velocity, msbBend etc)
//}









// #########################################################
// ############### MPU MAIN FUNCTION: ######################
void updateIMU(){
  // If intPin goes high, all data registers have new data
  if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01) {  // On interrupt, check if data ready interrupt
    readAccelData(accelCount);  // Read the x/y/z adc values
    getAres();
    
    // Now we'll calculate the accleration value into actual g's
    ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
    ay = (float)accelCount[1]*aRes; // - accelBias[1];   
    az = (float)accelCount[2]*aRes; // - accelBias[2];  
   
    readGyroData(gyroCount);  // Read the x/y/z adc values
    getGres();
 
    // Calculate the gyro value into actual degrees per second
    gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
    gy = (float)gyroCount[1]*gRes;  
    gz = (float)gyroCount[2]*gRes;   
  
    readMagData(magCount);  // Read the x/y/z adc values
    getMres();
    magbias[0] = +470.;  // User environmental x-axis correction in milliGauss, should be automatically calculated
    magbias[1] = +120.;  // User environmental x-axis correction in milliGauss
    magbias[2] = +125.;  // User environmental x-axis correction in milliGauss
    
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental corrections
    mx = (float)magCount[0]*mRes*magCalibration[0] - magbias[0];  // get actual magnetometer value, this depends on scale being set
    my = (float)magCount[1]*mRes*magCalibration[1] - magbias[1];  
    mz = (float)magCount[2]*mRes*magCalibration[2] - magbias[2];   
  }
  
  Now = micros();
  deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
  sumCount++;
  
  // Sensors x (y)-axis of the accelerometer is aligned with the y (x)-axis of the magnetometer;
  // the magnetometer z-axis (+ down) is opposite to z-axis (+ up) of accelerometer and gyro!
  // We have to make some allowance for this orientationmismatch in feeding the output to the quaternion filter.
  // For the MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward along the x-axis just like
  // in the LSM9DS0 sensor. This rotation can be modified to allow any convenient orientation convention.
  // This is ok by aircraft orientation standards!  
  // Pass gyro rate as rad/s
  MadgwickQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
  //  MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f, my, mx, mz);


  secondLastYaw = lastYaw;
  lastYaw = yaw;
  secondLastPitch = lastPitch;
  lastPitch = pitch;
  secondLastRoll = lastRoll;
  lastRoll = roll;
  
  lastYawMIDI = yawMIDI;
  lastPitchMIDI = pitchMIDI;
  lastRollMIDI = rollMIDI;

  // Define output variables from updated quaternion---these are Tait-Bryan angles, commonly used in aircraft orientation.
  // In this coordinate system, the positive z-axis is down toward Earth. 
  // Yaw is the angle between Sensor x-axis and Earth magnetic North (or true North if corrected for local declination, looking down on the sensor positive yaw is counterclockwise.
  // Pitch is angle between sensor x-axis and Earth ground plane, toward the Earth is positive, up toward the sky is negative.
  // Roll is angle between sensor y-axis and Earth ground plane, y-axis up is positive roll.
  // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
  // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
  // applied in the correct order which for this configuration is yaw, pitch, and then roll.
  // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
  yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);   
  pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
  roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
  pitch *= 180.0f / PI;
  yaw   *= 180.0f / PI; 
  yaw   -= -0.2; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
  roll  *= 180.0f / PI;
  
  yaw = (((secondLastYaw + yaw) / 2) + lastYaw) / 2;
  pitch = (((secondLastPitch + pitch) / 2) + lastPitch) / 2;
  roll = (((secondLastRoll + roll) / 2) + lastRoll) / 2;
  
  //float yawMIDI = fscale( 150.0, 70.0, 0.0, 127.0, yaw, 0.0);
  int yaw2 = (int)(yaw * 100);
  yawMIDI = map(yaw2, 15000, 7000, 0, 127);
  if(yaw2 > 15000){
    yawMIDI = 0;
  }
  else if(yaw2 < 7000){
    yawMIDI = 127;
  }
 // float pitchMIDI = fscale( 25.0, 0.0, 0.0, 127.0, yaw, 0.0);    
  int pitch2 = (int)(pitch * 100);
  pitchMIDI = map(pitch2, pitchMax*100, pitchMin*100, 0, 127);
  if(pitch2 > pitchMax*100){
    pitchMIDI = 0;
  }
  else if(pitch2 < pitchMin*100){
    pitchMIDI = 127;
  }
//      float rollMIDI = fscale( -35.0, 30.0, 0.0, 127.0, yaw, 0.0);    
  int roll2 = roll * 100;
  rollMIDI = map(roll2, rollMin*100, rollMax*100, 0, 127);
  if(roll2 < rollMin*100){
    rollMIDI = 0;
  }
  else if(roll2 > rollMax*100){
    rollMIDI = 127;
  }
  
  
  if(debugIMU == 1){
    displayTimer = millis();
    Serial.print("DisplayTimer: ");
    Serial.println(displayTimer);
    if(displayTimer - lastDisplay > 30){
//      Serial.println("                 Display");
//      Serial.print("mx: ");
//      Serial.println(mx); 
//      Serial.print("my: ");
//      Serial.println(my);  
//      Serial.print("mz: ");
//      Serial.println(mz);   
      
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      
      display.setCursor(0,0);
      
      display.print(" YAW:   ");
      display.println(yaw);
      display.println("");
      
      display.print(" PITCH: ");
      display.println(pitch);
      display.println("");
    
      display.print(" ROLL:  ");
      display.println(roll);  
      display.println("");
      
      display.display();
      lastDisplay = millis();
    }
  }
  
   else if(debugIMU == 2){
    displayTimer = millis();
    Serial.print("DisplayTimer: ");
    Serial.println(displayTimer);
    if(displayTimer - lastDisplay > 30){
//      Serial.println("                 Display");
//      Serial.print("mx: ");
//      Serial.println(mx); 
//      Serial.print("my: ");
//      Serial.println(my);  
//      Serial.print("mz: ");
//      Serial.println(mz);   
      
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      
      display.setCursor(0,0);
      
      display.print(" YAW:   ");
      display.println(yawMIDI);
      display.println("");
      
      display.print(" PITCH: ");
      display.println(pitchMIDI);
      display.println("");
    
      display.print(" ROLL:  ");
      display.println(rollMIDI);  
      display.println("");
      
      display.display();
      lastDisplay = millis();
    }
  }
  
  
}










//===================================================================================================================
//====== Set of useful function to access acceleration. gyroscope, magnetometer, and temperature data
//===================================================================================================================

void getMres() {
  switch (Mscale)
  {
 	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}

void getGres() {
  switch (Gscale)
  {
 	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
          break;
    case GFS_500DPS:
          gRes = 500.0/32768.0;
          break;
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
          break;
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
          break;
  }
}

void getAres() {
  switch (Ascale)
  {
 	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
          break;
    case AFS_4G:
          aRes = 4.0/32768.0;
          break;
    case AFS_8G:
          aRes = 8.0/32768.0;
          break;
    case AFS_16G:
          aRes = 16.0/32768.0;
          break;
  }
}


void readAccelData(int16_t * destination)
{
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
}


void readGyroData(int16_t * destination)
{
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
}

void readMagData(int16_t * destination)
{
  uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
  if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
  readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
  uint8_t c = rawData[6]; // End data read by reading ST2 register
    if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
    destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
    destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
    destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ; 
   }
  }
}

int16_t readTempData()
{
  uint8_t rawData[2];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
  return ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a 16-bit value
}
       
void initAK8963(float * destination)
{
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
  delay(10);
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
  delay(10);
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;  
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.; 
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
  delay(10);
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  delay(10);
}






 void magcalMPU9250(float * dest1, float * dest2) 
 {
 uint16_t ii = 0, sample_count = 0;
 int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};

 Serial.println("Mag Calibration: Wave device in a figure eight until done!");
 delay(4000);

 sample_count = 128;
 for(ii = 0; ii < sample_count; ii++) {
 readMagData(mag_temp);  // Read the mag data   
 for (int jj = 0; jj < 3; jj++) {
  if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
  if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 }
 delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 }

// Get hard iron correction
 mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts

 dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];   
 dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];  

// Get soft iron correction estimate
 mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts

 float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 avg_rad /= 3.0;

 dest2[0] = avg_rad/((float)mag_scale[0]);
 dest2[1] = avg_rad/((float)mag_scale[1]);
 dest2[2] = avg_rad/((float)mag_scale[2]);

 Serial.println("Mag Calibration done!");
 }







void initMPU9250()
{  
 // wake up device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
  delay(100); // Wait for all registers to reset 

 // get stable time source
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
  delay(200); 
  
 // Configure Gyro and Thermometer
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively; 
 // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);  

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate 
                                    // determined inset in CONFIG above
 
// Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 // c = c & ~0xE0; // Clear self-test bits [7:5] 
  c = c & ~0x02; // Clear Fchoice bits [1:0] 
  c = c & ~0x18; // Clear AFS bits [4:3]
  c = c | Gscale << 3; // Set full scale range for the gyro
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
  
 // Set accelerometer full-scale range configuration
  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 // c = c & ~0xE0; // Clear self-test bits [7:5] 
  c = c & ~0x18;  // Clear AFS bits [4:3]
  c = c | Ascale << 3; // Set full scale range for the accelerometer 
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
  
 // The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
   delay(100);
}


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{  
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  
 // reset device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
  delay(100);
   
 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready 
 // else use the internal oscillator, bits 2:0 = 001
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
  writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
  delay(200);                                    

// Configure device for bias calculation
  writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
  writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
  delay(15);
  
// Configure MPU6050 gyro and accelerometer for bias calculation
  writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 
  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
  delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes

// At end of sample accumulation, turn off FIFO sensor read
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
  
  for (ii = 0; ii < packet_count; ii++) {
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
            
}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
    gyro_bias[0]  /= (int32_t) packet_count;
    gyro_bias[1]  /= (int32_t) packet_count;
    gyro_bias[2]  /= (int32_t) packet_count;
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
  else {accel_bias[2] += (int32_t) accelsensitivity;}
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
  
// Push gyro biases to hardware registers
  writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
  writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
  
// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;  
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;

// Construct the accelerometer biases for push to the hardware accelerometer bias registers. These registers contain
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  
  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
  
  for(ii = 0; ii < 3; ii++) {
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
  }
  
  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
  accel_bias_reg[1] -= (accel_bias[1]/8);
  accel_bias_reg[2] -= (accel_bias[2]/8);
  
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  data[5] = (accel_bias_reg[2])      & 0xFF;
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 
// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
  writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
  writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
   uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
   uint8_t selfTest[6];
   int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
   float factoryTrim[6];
   uint8_t FS = 0;
   
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
  aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
  gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
  gAvg[ii] /= 200;
  }
  
// Configure the accelerometer for self-test
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
   delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
  aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
  gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
  gSTAvg[ii] /= 200;
  }   
  
 // Configure the gyro and accelerometer for normal operation
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);  
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);  
   delay(25);  // Delay a while to let the device stabilize
   
   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
   selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
   selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
   selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
   selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
   selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (int i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];   // Report percent differences
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]; // Report percent differences
   }
   
}

        

        void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

        uint8_t readByte(uint8_t address, uint8_t subAddress)
{
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
	Wire.endTransmission(I2C_NOSTOP);        // Send the Tx buffer, but send a restart to keep connection alive
//	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
//	Wire.requestFrom(address, 1);  // Read one byte from slave register address 
	Wire.requestFrom(address, (size_t) 1);  // Read one byte from slave register address 
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

        void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{  
	Wire.beginTransmission(address);   // Initialize the Tx buffer
	Wire.write(subAddress);            // Put slave register address in Tx buffer
	Wire.endTransmission(I2C_NOSTOP);  // Send the Tx buffer, but send a restart to keep connection alive
//	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	uint8_t i = 0;
//        Wire.requestFrom(address, count);  // Read bytes from slave register address 
        Wire.requestFrom(address, (size_t) count);  // Read bytes from slave register address 
	while (Wire.available()) {
        dest[i++] = Wire.read(); }         // Put read results in the Rx buffer
}
















// Implementation of Sebastian Madgwick's "...efficient orientation filter for... inertial/magnetic sensor arrays"
// (see http://www.x-io.co.uk/category/open-source/ for examples and more details)
// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
        void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
        {
            float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
            float norm;
            float hx, hy, _2bx, _2bz;
            float s1, s2, s3, s4;
            float qDot1, qDot2, qDot3, qDot4;

            // Auxiliary variables to avoid repeated arithmetic
            float _2q1mx;
            float _2q1my;
            float _2q1mz;
            float _2q2mx;
            float _4bx;
            float _4bz;
            float _2q1 = 2.0f * q1;
            float _2q2 = 2.0f * q2;
            float _2q3 = 2.0f * q3;
            float _2q4 = 2.0f * q4;
            float _2q1q3 = 2.0f * q1 * q3;
            float _2q3q4 = 2.0f * q3 * q4;
            float q1q1 = q1 * q1;
            float q1q2 = q1 * q2;
            float q1q3 = q1 * q3;
            float q1q4 = q1 * q4;
            float q2q2 = q2 * q2;
            float q2q3 = q2 * q3;
            float q2q4 = q2 * q4;
            float q3q3 = q3 * q3;
            float q3q4 = q3 * q4;
            float q4q4 = q4 * q4;

            // Normalise accelerometer measurement
            norm = sqrt(ax * ax + ay * ay + az * az);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f/norm;
            ax *= norm;
            ay *= norm;
            az *= norm;

            // Normalise magnetometer measurement
            norm = sqrt(mx * mx + my * my + mz * mz);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f/norm;
            mx *= norm;
            my *= norm;
            mz *= norm;

            // Reference direction of Earth's magnetic field
            _2q1mx = 2.0f * q1 * mx;
            _2q1my = 2.0f * q1 * my;
            _2q1mz = 2.0f * q1 * mz;
            _2q2mx = 2.0f * q2 * mx;
            hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
            hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
            _2bx = sqrt(hx * hx + hy * hy);
            _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
            _4bx = 2.0f * _2bx;
            _4bz = 2.0f * _2bz;

            // Gradient decent algorithm corrective step
            s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
            norm = 1.0f/norm;
            s1 *= norm;
            s2 *= norm;
            s3 *= norm;
            s4 *= norm;

            // Compute rate of change of quaternion
            qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
            qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
            qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
            qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;

            // Integrate to yield quaternion
            q1 += qDot1 * deltat;
            q2 += qDot2 * deltat;
            q3 += qDot3 * deltat;
            q4 += qDot4 * deltat;
            norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
            norm = 1.0f/norm;
            q[0] = q1 * norm;
            q[1] = q2 * norm;
            q[2] = q3 * norm;
            q[3] = q4 * norm;

        }
  
  
  
 // Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
 // measured ones. 
            void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
        {
            float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
            float norm;
            float hx, hy, bx, bz;
            float vx, vy, vz, wx, wy, wz;
            float ex, ey, ez;
            float pa, pb, pc;

            // Auxiliary variables to avoid repeated arithmetic
            float q1q1 = q1 * q1;
            float q1q2 = q1 * q2;
            float q1q3 = q1 * q3;
            float q1q4 = q1 * q4;
            float q2q2 = q2 * q2;
            float q2q3 = q2 * q3;
            float q2q4 = q2 * q4;
            float q3q3 = q3 * q3;
            float q3q4 = q3 * q4;
            float q4q4 = q4 * q4;   

            // Normalise accelerometer measurement
            norm = sqrt(ax * ax + ay * ay + az * az);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f / norm;        // use reciprocal for division
            ax *= norm;
            ay *= norm;
            az *= norm;

            // Normalise magnetometer measurement
            norm = sqrt(mx * mx + my * my + mz * mz);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f / norm;        // use reciprocal for division
            mx *= norm;
            my *= norm;
            mz *= norm;

            // Reference direction of Earth's magnetic field
            hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
            hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
            bx = sqrt((hx * hx) + (hy * hy));
            bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

            // Estimated direction of gravity and magnetic field
            vx = 2.0f * (q2q4 - q1q3);
            vy = 2.0f * (q1q2 + q3q4);
            vz = q1q1 - q2q2 - q3q3 + q4q4;
            wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
            wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
            wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);  

            // Error is cross product between estimated direction and measured direction of gravity
            ex = (ay * vz - az * vy) + (my * wz - mz * wy);
            ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
            ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
            if (Ki > 0.0f)
            {
                eInt[0] += ex;      // accumulate integral error
                eInt[1] += ey;
                eInt[2] += ez;
            }
            else
            {
                eInt[0] = 0.0f;     // prevent integral wind up
                eInt[1] = 0.0f;
                eInt[2] = 0.0f;
            }

            // Apply feedback terms
            gx = gx + Kp * ex + Ki * eInt[0];
            gy = gy + Kp * ey + Ki * eInt[1];
            gz = gz + Kp * ez + Ki * eInt[2];

            // Integrate rate of change of quaternion
            pa = q2;
            pb = q3;
            pc = q4;
            q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
            q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
            q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
            q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);

            // Normalise quaternion
            norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
            norm = 1.0f / norm;
            q[0] = q1 * norm;
            q[1] = q2 * norm;
            q[2] = q3 * norm;
            q[3] = q4 * norm;
 
        }



float fscale( float originalMin, float originalMax, float newBegin, float
newEnd, float inputValue, float curve){

  float OriginalRange = 0;
  float NewRange = 0;
  float zeroRefCurVal = 0;
  float normalizedCurVal = 0;
  float rangedValue = 0;
  boolean invFlag = 0;


  // condition curve parameter
  // limit range

  if (curve > 10) curve = 10;
  if (curve < -10) curve = -10;

  curve = (curve * -.1) ; // - invert and scale - this seems more intuitive - postive numbers give more weight to high end on output
  curve = pow(10, curve); // convert linear scale into lograthimic exponent for other pow function

  /*
   Serial.println(curve * 100, DEC);   // multply by 100 to preserve resolution  
   Serial.println();
   */

  // Check for out of range inputValues
  if (inputValue < originalMin) {
    inputValue = originalMin;
  }
  if (inputValue > originalMax) {
    inputValue = originalMax;
  }

  // Zero Refference the values
  OriginalRange = originalMax - originalMin;

  if (newEnd > newBegin){
    NewRange = newEnd - newBegin;
  }
  else
  {
    NewRange = newBegin - newEnd;
    invFlag = 1;
  }

  zeroRefCurVal = inputValue - originalMin;
  normalizedCurVal  =  zeroRefCurVal / OriginalRange;   // normalize to 0 - 1 float

  /*
  Serial.print(OriginalRange, DEC);  
   Serial.print("   ");  
   Serial.print(NewRange, DEC);  
   Serial.print("   ");  
   Serial.println(zeroRefCurVal, DEC);  
   Serial.println();  
   */

  // Check for originalMin > originalMax  - the math for all other cases i.e. negative numbers seems to work out fine
  if (originalMin > originalMax ) {
    return 0;
  }

  if (invFlag == 0){
    rangedValue =  (pow(normalizedCurVal, curve) * NewRange) + newBegin;

  }
  else     // invert the ranges
  {  
    rangedValue =  newBegin - (pow(normalizedCurVal, curve) * NewRange);
  }

  return rangedValue;
}
